% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deaths_from_popn_mort.R
\name{deaths_from_popn_mort}
\alias{deaths_from_popn_mort}
\title{Apply mortality rates to a population.}
\usage{
deaths_from_popn_mort(popn, mortality, col_aggregation = c("year",
  "gss_code", "sex", "age"), col_count = "value", col_rate = "value",
  col_deaths = "value")
}
\arguments{
\item{popn}{A data frame containing population data}

\item{mortality}{A data frame containing mortality rates (per aggregation
level per year)}

\item{col_aggregation}{A string or character vector giving the names of
columns to which the output deaths will be aggregated to. If names differ
between input data frames, use a named character vector, e.g.
\code{c("popn_age"="mortality_age")}. Can contain columns that are not in
\code{mortality}. Default \code{c("year", "gss_code", "age", "sex")}}

\item{col_count}{String. Name of column in \code{popn} containing population
counts. Default "value"}

\item{col_rate}{String. Name of column in \code{mortality} containing
mortality rates. Default "value"}

\item{col_deaths}{String. Name of column to write deaths to in the output.
Default "value"}
}
\value{
A data frame of deaths with one row for each distinct value of the
  input \code{col_aggregation} column.
}
\description{
Given a cohort population and a data frame of mortality rates that can be
joined to the population, return a data table with the population's
aggregation levels and a deaths count.
}
\details{
If deaths would result in a negative population, an error will be thrown
(default) or the deaths will be capped at the population count.
}
\examples{

library(deaths)

popn <- expand.grid(year=2000, age=20:21, gss_code=c("a","b"), sex=c("f","m"), count = 100)
mortality <- expand.grid(year=2000, age=20:21, gss_code=c("a","b"), sex=c("f","m"), rate = 0.5)

deaths <- popn_apply_rate(popn,
                         mortality,
                         col_aggregation = c("year", "gss_code", "sex", "age"),
                         col_count = "count",
                         col_rate = "rate",
                         col_deaths = "deaths")

# Due to default parameter values, this is equivalent to
count <- popn_apply_rate(popn, rate)

}
