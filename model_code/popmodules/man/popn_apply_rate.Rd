% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/popn_apply_rate.R
\name{popn_apply_rate}
\alias{popn_apply_rate}
\title{Apply rates to a population.}
\usage{
popn_apply_rate(popn, popn_rate, col_aggregation = c("year", "gss_code",
  "sex", "age"), col_popn = "popn", col_rate = "rate",
  col_out = "component")
}
\arguments{
\item{popn}{A data frame containing population data.}

\item{popn_rate}{A data frame containing rates data per time step (usually
year).}

\item{col_aggregation}{A string or character vector giving the names of
columns to which the output will be aggregated to. All elements must give
columns in \code{popn} but not all need to be in \code{popn_rate}, that is,
it can be at a lower resolution. If names differ between the two input data
frames, use a named character vector, e.g. \code{c("gss_code"="LSOA11CD")}.
Default \code{c("year", "gss_code", "age", "sex")}.}

\item{col_popn}{String. Name of column in \code{popn} containing population
counts. Default "popn".}

\item{col_rate}{String. Name of column in \code{popn_rate} containing rate
data. Default "rate".}

\item{col_out}{String. Name of column for the output component count (popn*rate) in
the output. Default "component".}
}
\value{
A data frame of component counts calculated as input popn * rate, with one row
  for each distinct level of the input \code{col_aggregation} columns.
}
\description{
Given a cohort population and a data frame of rates at the same or lower
resolution, return a data table of the population's aggregation levels, and a
component count resulting from the rate applied to the population.
}
\examples{

library(generalpop)

popn <- expand.grid(year=2000, age=20:21, gss_code=c("a","b"), sex=c("f","m"), popn = 100)
rate <- expand.grid(year=2000, age=20:21, gss_code=c("a","b"), sex=c("f","m"), rate = 0.5)

component <- popn_apply_rate(popn,
                         rate,
                         col_aggregation = c("year", "gss_code", "sex", "age"),
                         col_popn = "popn",
                         col_rate = "rate",
                         col_out = "component")

# Due to default parameter values, this is equivalent to
component <- popn_apply_rate(popn, rate)

}
