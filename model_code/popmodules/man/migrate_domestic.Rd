% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/migrate_domestic.R
\name{migrate_domestic}
\alias{migrate_domestic}
\title{Apply origin-destination migration rates to a population}
\usage{
migrate_domestic(popn, mign_rate, col_aggregation = c("year", gss_code =
  "gss_out", "sex", "age"), col_gss_destination = "gss_in",
  col_popn = "popn", col_rate = "rate", col_flow = "flow",
  pop1_is_subset = FALSE, many2one = FALSE,
  missing_levels_rate = TRUE, col_origin_destination = NA)
}
\arguments{
\item{popn}{A data frame containing population data.}

\item{mign_rate}{A data frame containing origin-destination migration at the
same or lower resolution than \code{popn}.}

\item{col_aggregation}{A string or named character vector giving the names of
columns in \code{popn} which the output will be aggregated to, and how they
join to columns in \code{mign_rate}. In particular, the mapping from the
population geography to the migration origin geography columns must be
specified, e.g. \code{c("year", "gss_code"="gss_out", "sex", "age")}. The
inflow GSS is specified in the next parameter. All elements must give
columns in \code{popn} but not all need to be in \code{mign_rate}, (that
is, \code{mign_rate} can be at a coarser resolution). If there is more than
one geographic resolution, only specify the finest resolution common to the
population data frame and the migration origin data. Default
\code{c("year", "gss_code"="gss_out", "sex", "age")}.}

\item{col_gss_destination}{String or character vector. Column(s) in
  \code{mign_rate} containing migration rate destination geographies, plus
any other aggregation levels not present in \code{popn} that you want to join
to. Usually this just will be the desination geographies column. If it is of
length two or more you will need to specify \code{col_outflow_inflow} below.
Default "gss_in".}

\item{col_popn}{String. Name of column in \code{popn} containing population
counts. Default "popn"}

\item{col_rate}{String. Name of column in \code{mign_rate} containing
migration rates. Default "rate"}

\item{col_flow}{String. Name of column to write output flows to. Default
"flow".}

\item{pop1_is_subset}{Logical. If the two input data frames cover the same
domain and you expect every level of \code{mign_rate} to be matched to by a
level in \code{popn} set this to TRUE, and this will be checked. Default
FALSE.}

\item{many2one}{Logical. Setting this to FALSE will check that no more than
one level from \code{popn} matches to each level of \code{mign_rate}.
Default TRUE.}

\item{missing_levels_rate}{Logical. Setting this to TRUE will assume missing
origin-destination flows are zero. A warning will still be thrown if there
is zero outmigration for an entire aggregation level in a geography. Note that
your origin-destination flows must contain rates from each geography to
itself before this can be set to FALSE. If FALSE then an error will be
thrown if missing levels are detected. Default TRUE.}

\item{col_origin_destination}{Character vector. Names of the origin and
destination columns in \code{mign_rate}. Only required when
\code{col_gss_destination} is of length two or more, though providing it
(marginally) speeds things up. The code is able to infer its value
otherwise. Default NA.}
}
\value{
A data frame of origin-destination flows at the aggregation levels
  provided by \code{col_aggregation}.
}
\description{
Given a cohort population and a data frame of migration rates that can be
joined to the population, return a data table of origin-destination flows.
}
\details{
The output data frame will use the names of the migration dataset for the
origin and destination columns (if origin columns differ).

The function tries to maintain tibbles, factors and grouping to match the
inputs, with the input population taking precedence when there is a conflict.

The function can't yet handle migration data at a lower geographic resolution than
the population data, but it's on the to do list.

Despite its fancy appearance, it's really just a little wrapper around
popn_apply_rate
}
\examples{

TODO examples

}
